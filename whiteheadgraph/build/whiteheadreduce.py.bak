import wgraph as wg
from wgraph import *
import AutF as aut
from pygraph.classes.digraph import digraph
from pygraph.algorithms.minmax import maximum_flow

def findReduction(wordlistorwhiteheadgraph):
    """
    Find a Whitehead automorphism that reduces complexity.
    """
    # No min_cut function for networkx yet, so use a pygraph instead.
    W, wordlist=wg.wgparse(wordlistorwhiteheadgraph)
    auxgraph=digraph()
    auxgraph.add_nodes(W.nodes())
    for i in range(1,W.rank+1):
        weight=len([e for e in W.incidentEdges(i) if W.oppositeEnd(e,i)==-i])
        auxgraph.add_edge((i,-i),wt=weight)
        auxgraph.add_edge((-i,i),wt=weight)
        for j in range(-W.rank,-i)+range(i+1,W.rank+1):
            weight=len([e for e in W.incidentEdges(i) if W.oppositeEnd(e,i)==j])
            auxgraph.add_edge((i,j),wt=weight)
            auxgraph.add_edge((j,i),wt=weight)
            weight=len([e for e in W.incidentEdges(-i) if W.oppositeEnd(e,-i)==j])
            auxgraph.add_edge((-i,j),wt=weight)
            auxgraph.add_edge((j,-i),wt=weight)
    x=0
    Z=[]
    for i in range(1,W.rank+1):
        (maxflow,mincut)=maximum_flow(auxgraph, i,-i)
        cutsize=sum([maxflow[(i,j)] for j in auxgraph.nodes() if (i,j) in maxflow])
        valence=W.valence(i)
        if valence>cutsize:
            x=i
            Z=[j for j in auxgraph.nodes() if mincut[j]==mincut[i]]
            break
    return (x,Z)

def WhiteheadMinimize(wordlistorwhiteheadgraph, justtellmeitbecomesdisconnected=False):
    """
    Reduce to minimal Whitehead complexity.
    """
    W, wordlist=wg.wgparse(wordlistorwhiteheadgraph)
    if justtellmeitbecomesdisconnected:
        if not W.isConnected():
            return True
    red=findReduction(W)
    whiteheadsequence=[aut.whiteheadauto(*red,rank=W.rank)]
    nextwordlist=wordlist
    while whiteheadsequence[0].Z!=[]:
        nextwordlist=[whiteheadsequence[0](w) for w in nextwordlist]
        nextred=findReduction(nextwordlist)
        whiteheadsequence=[aut.whiteheadauto(*nextred,rank=W.rank)]+whiteheadsequence
        if justtellmeitbecomesdisconnected:
            if not wg.WGraph(nextwordlist).isConnected():
                return True
    if justtellmeitbecomesdisconnected:
        return False
    
    return {'wordlist':nextwordlist, 'whiteheadsequence':whiteheadsequence}
    


    
